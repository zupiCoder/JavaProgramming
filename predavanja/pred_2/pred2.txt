'A' - char
7.3f - float
7.3l - long

izraz - zaporedje operandov
stavek - nima vrednosti, ima ucinek (S.o.pln); int a; int b = 10 (deklaracija + inicializacija),
b = 20(prireditveni stavek, spremenljivki nastavim novo vrednost)
spremenljivko vedno deklariraj in inicializiraj! (nedefiniran, vrednost prostorcka v pomnilniku)

AVTOMATSKO TESTIRANJE
tj. exe

BLOK = kos programa znotraj {in}
spremenljivke v bloku obstajajo samo do konca bloka, v katerem je definirana
int a = 1;
{
    int b = 2;
}
b ne obstaja vec;

KRMILNI KONSTRUKTI
- stavki se vrsijo po vrsti 
Pogojni stavek - ce je nek pogoj izpolnjen se dolocen del kode izvrsi(blok), drugace pa ne
ce je stavek sam lahko izpustimo zavite oklepaje:
if(pogoj)
stavek

if(x>y){

}else {

}
ce je pogoj izpolnjen se zazenejo stavki prvega bloka, drugace pa stavki drugega bloka
v else if stavku se v vsakem primeru izvede natanko eno zaporedje stavkov (dodaj iz ppt)

pogoj v pogojnem stavku je logicni izraz
    - izraz z vrednostjo tipa boolean (true / false)

Logicni operatorji
a && b; in
a || b; ali
!a; Ne 

== enakost!!
= prirejanje
kratkosticno izvajanje :
p && q - ce p false, q preskoci
p || q - ce p true, se q preskoci

2 == 2 || t == 3 prevajalnik prebere kodo in preveri, ce so vse spremenljivke definirane
2 == 2 || 2 > 3


Zanke - ko zelimo neko stvar ponavljati ...
int i = 1
while( i <= 3){
    System.out.println("a");    ce je pogoj izpolnjen se stavki izvedejo, potem ponovno preveri, ce je pogoj izpolnjen, ce ni se zanka zakljuci
    i++; i += 1
}
System.out.println("b")

operatorji op= 
a += 1
h -= s 
x *= y - 3
p /= q
p %= q
i++                              x--
++i                              --x
int a = 10
int b = ++a b = 11 in a = 11 !! NAJPREJ SE SESTEJE, sele potem se shrani vrednost

int c = 10
int d = c++ d = 10 c = 11 NAJPREJ SE SHRANI VREDNOST, sele potem se sesteje

ko je samostojna spremenljivka lahko uporabis a++, ++a

a = b = c    (b = c) => a = b

zanka do, stavki se vedno izvedejo vsaj enkrat, pogoj se preveri potem, ko se stavki ze izvedejo
do{     
    ...    
}while();

for zanka 
inicializacija; int i = ...
while(pogoj){
    stavki
    posodobitev;
}

for(inicializacija; pogoj; posodobitev;){
    stavki;

}

for(i = 1; i <= 3; i++){}
